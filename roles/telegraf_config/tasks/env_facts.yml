# - name: Derive environment details when environmentID not set
#   when: environmentID is defined and environmentID != ''
#   block:
#   - name: Attempt to read the authorized_keys file from the home directory (~)
#     slurp:
#       src: ~/.ssh/authorized_keys
#     register: authorized_keys_home
#     ignore_errors: true  # Ignore errors if the file doesn't exist

#   - name: Attempt to read the authorized_keys file from the fallback path (/home/ubuntu/.ssh/authorized_keys)
#     slurp:
#       src: /home/ubuntu/.ssh/authorized_keys
#     register: authorized_keys_fallback
#     when: authorized_keys_home is failed
#     ignore_errors: true  # Ignore errors if the file doesn't exist

#   - name: Choose the populated authorized_keys file
#     set_fact:
#       authorized_keys_content: >-
#         {{
#           (authorized_keys_home['content'] | b64decode)
#           if authorized_keys_home is succeeded and authorized_keys_home['content'] | b64decode | length > 0
#           else (authorized_keys_fallback['content'] | b64decode)
#         }}
#     when: authorized_keys_home is succeeded and authorized_keys_fallback is defined

#   - name: Set fact for userid
#     set_fact:
#       userid: >-
#         {{
#           (lookup('env', 'USER_ID') | default('')) or
#           (
#             authorized_keys_content.split('\n')[0].split()[-1]
#             if authorized_keys_content.split('\n')[0].split() | length > 2
#             else ansible_fqdn
#           )
#         }}
#     when: authorized_keys_content is defined

- name: Set fact for hostid
  set_fact:
    hostid: >-
      {{
        environmentID
        if (environmentID is defined and environmentID | length > 0)
        else ansible_fqdn
      }}